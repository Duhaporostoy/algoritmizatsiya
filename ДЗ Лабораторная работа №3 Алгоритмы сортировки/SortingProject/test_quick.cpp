// test_quick.cpp
#include "quick_sort.h"
#include "test_utils.h"
#include <iostream>
#include <vector>
#include <cassert>

void testQuickSort3Way() {
    std::cout << "\nüß™ –¢–µ—Å—Ç—ã –¥–ª—è Quick Sort (3-way):\n";

    // –¢–µ—Å—Ç 1: –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤
    std::vector<int> arr1 = { 64, 34, 25, 12, 22, 11, 90 };
    quickSort3Way(arr1, 0, static_cast<int>(arr1.size()) - 1);
    assert(isSorted(arr1));
    std::cout << "‚úÖ –¢–µ—Å—Ç 1: –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤ ‚Äî OK\n";

    // –¢–µ—Å—Ç 2: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    std::vector<int> arr2 = { 1, 2, 3, 4, 5 };
    quickSort3Way(arr2, 0, static_cast<int>(arr2.size()) - 1);
    assert(isSorted(arr2));
    std::cout << "‚úÖ –¢–µ—Å—Ç 2: –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚Äî OK\n";

    // –¢–µ—Å—Ç 3: –æ–±—Ä–∞—Ç–Ω—ã–π
    std::vector<int> arr3 = { 5, 4, 3, 2, 1 };
    quickSort3Way(arr3, 0, static_cast<int>(arr3.size()) - 1);
    assert(isSorted(arr3));
    std::cout << "‚úÖ –¢–µ—Å—Ç 3: –æ–±—Ä–∞—Ç–Ω—ã–π ‚Äî OK\n";

    // –¢–µ—Å—Ç 4: –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
    std::vector<int> arr4 = { 42 };
    quickSort3Way(arr4, 0, static_cast<int>(arr4.size()) - 1);
    assert(isSorted(arr4));
    std::cout << "‚úÖ –¢–µ—Å—Ç 4: –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç ‚Äî OK\n";

    // –¢–µ—Å—Ç 5: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    std::vector<int> arr5 = {};
    quickSort3Way(arr5, 0, -1);  // –¥–∏–∞–ø–∞–∑–æ–Ω –ø—É—Å—Ç–æ–π
    assert(arr5.empty());
    std::cout << "‚úÖ –¢–µ—Å—Ç 5: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ ‚Äî OK\n";

    std::cout << "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Quick Sort –ø—Ä–æ–π–¥–µ–Ω—ã!\n";
}